import React, { useState, useEffect } from "react";
import { Box, Typography, useTheme } from "@mui/material";
import { DataGrid } from "@mui/x-data-grid";
import { tokens } from "../../theme";
import { mockDataInvoices } from "../../data/mockData";
import Header from "../../components/Header";
import { useUser, useClerk } from "@clerk/clerk-react";

const Invoices = () => {
  const theme = useTheme();
  const colors = tokens(theme.palette.mode);
  const [windowHeight, setWindowHeight] = useState(window.innerHeight);
  const { user } = useUser();
  const userId = user ? user.id : "Loading...";
  const userEmail = user?.primaryEmailAddress?.emailAddress || "Loading...";
  const [allUsers, setAllUsers] = useState([]);
  const [error, setError] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const clerk = useClerk();

  useEffect(() => {
    const handleResize = () => {
      setWindowHeight(window.innerHeight);
    };

    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        setIsLoading(true);
        const response = await fetch('/api/users'); // Changed from '/api/getUsers' to '/api/users'
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const users = await response.json();
        console.log('Users from Backend:', users);
        setAllUsers(users || []);
        setError(null);
      } catch (err) {
        console.error('Detailed error:', err);
        setError(`Failed to fetch users: ${err.message}`);
        setAllUsers([]);
      } finally {
        setIsLoading(false);
      }
    };

    fetchUsers();
  }, [clerk]);

  // Add this debug log
  console.log('Current allUsers state:', allUsers);

  const columns = [
    { field: "id", headerName: "ID" },
    {
      field: "name",
      headerName: "Name",
      flex: 1,
      cellClassName: "name-column--cell",
    },
    {
      field: "phone",
      headerName: "Phone Number",
      flex: 1,
    },
    {
      field: "email",
      headerName: "Email",
      flex: 1,
    },
    {
      field: "cost",
      headerName: "Egg Scanned",
      flex: 1,
      renderCell: (params) => (
        <Typography color={colors.greenAccent[500]}>
          {params.row.cost}
        </Typography>
      ),
    },
    {
      field: "date",
      headerName: "Date",
      flex: 1,
    },
  ];

  return (
    <Box m="20px" display="flex" flexDirection="column" height="100vh">
      <Header title="INVOICES" subtitle="List of Invoice Balances" />
      <Typography variant="h6">User ID: {userId}</Typography>
      <Typography variant="h6">User Email: {userEmail}</Typography>
      {isLoading ? (
        <Typography>Loading users...</Typography>
      ) : error ? (
        <Typography color="error">{error}</Typography>
      ) : null}
      <Box
        mt="40px"
        flexGrow={1}
        sx={{
          "& .MuiDataGrid-root": {
            border: "none",
          },
          "& .MuiDataGrid-cell": {
            borderBottom: "none",
          },
          "& .name-column--cell": {
            color: colors.greenAccent[300],
          },
          "& .MuiDataGrid-columnHeaders": {
            backgroundColor: colors.blueAccent[700],
            borderBottom: "none",
          },
          "& .MuiDataGrid-virtualScroller": {
            backgroundColor: colors.primary[400],
          },
          "& .MuiDataGrid-footerContainer": {
            borderTop: "none",
            backgroundColor: colors.blueAccent[700],
          },
          "& .MuiCheckbox-root": {
            color: `${colors.greenAccent[200]} !important`,
          },
        }}
      >
        <DataGrid
          checkboxSelection
          rows={mockDataInvoices}
          columns={columns}
          autoHeight
        />
      </Box>
    </Box>
  );
};

export default Invoices;
