import React, { useState, useEffect, useContext } from 'react';
import eventBus from '../../eventBus'; // Assuming you have an event bus setup in your React project
import cv from './opencv';
import { useLocation } from 'react-router-dom';
import { Container, Grid, Card, CardContent, CardActions, Button, Tooltip, Slider, TextField, Dialog, List, ListItem, ListItemText, IconButton, Icon, CircularProgress } from '@mui/material';
import FilterAltIcon from '@mui/icons-material/FilterAlt';
import RestartAltIcon from '@mui/icons-material/RestartAlt';

const Analysis = () => {

const [drawer, setDrawer] = useState(false);
const [infoExpanded, setInfoExpanded] = useState(false);
const [eggsize, setEggsize] = useState(null);
const [analyzedImage, setAnalyzedImage] = useState(null);
const [imageSize, setImageSize] = useState('');
const [imageDepth, setImageDepth] = useState('');
const [imageChannels, setImageChannels] = useState('');
const [imageType, setImageType] = useState('');
const [showAnalysis, setShowAnalysis] = useState(true);
const [showBottom, setShowBottom] = useState(false);
const [firstRun, setFirstRun] = useState(true);
const [active, setActive] = useState(null);
const [analyzedImages, setAnalyzedImages] = useState([
  { output: 'src', source: 'src2' },
  { output: 'threshold', source: 'src3' },
  { output: 'objects', source: 'src5' },
  { output: 'outlines', source: 'src6' },
  { output: 'overlay', source: 'src7' }
]);
const [analyzedImagesPretty, setAnalyzedImagesPretty] = useState([
  'Source Image',
  'Threshold',
  'Detected Objects',
  'Sorted Markers',
  'Outlined Overlay'
]);
const [analysisStarted, setAnalysisStarted] = useState(false);
const [analysisComplete, setAnalysisComplete] = useState(false);
const [threshValue, setThreshValue] = useState(120);
const [minEggRadius, setMinEggRadius] = useState(5);
const [maxEggRadius, setMaxEggRadius] = useState(13);
const [maxEggCluster, setMaxEggCluster] = useState(30);
const [singlesCount, setSinglesCount] = useState(0);
const [clustersCount, setClustersCount] = useState(0);
const [singlesArray, setSinglesArray] = useState([]);
const [singlesTotalArea, setSinglesTotalArea] = useState(0);
const [clustersTotalArea, setClustersTotalArea] = useState(0);
const [avgClusterArea, setAvgClusterArea] = useState(0);
const [avgEggsPerCluster, setAvgEggsPerCluster] = useState(0);
const [singlesAvg, setSinglesAvg] = useState(0);
const [clustersArray, setClustersArray] = useState([]);
const [singlesCalculated, setSinglesCalculated] = useState(0);
const [eggBoxes, setEggBoxes] = useState(0);
const [detectedObjectsArray, setDetectedObjectsArray] = useState([]);
const [detectedObjectsArrayList, setDetectedObjectsArrayList] = useState([]);
const [totalEggs, setTotalEggs] = useState(0);
const [window, setWindow] = useState(0);
const [length, setLength] = useState(5);
const [detailsDialog, setDetailsDialog] = useState(false);
const location = useLocation();
const { imageData, additionalData } = location.state || {};


useEffect(() => {
  console.log('useEffect: Initializing component1');
  console.log('useEffect: imageData', imageData);
  console.log('useEffect: additionalData', additionalData);

  const handleImageType = (imageType) => {
    console.log('handleImageType: Setting image type parameters2');
    if (imageType === 0) {
      setThreshValue(116);
      setMinEggRadius(1);
      setMaxEggRadius(8);
      setMaxEggCluster(8);
    } else if (imageType === 1) {
      setThreshValue(120);
      setMinEggRadius(5);
      setMaxEggRadius(13);
      setMaxEggCluster(30);
    } else {
      setThreshValue(120);
      setMinEggRadius(4);
      setMaxEggRadius(14);
      setMaxEggCluster(20);
    }
  };

  if (imageData) {
    console.log('useEffect: Image data available, setting analyzed image3');
    setAnalyzedImage(imageData);
  } else {
    console.log('useEffect: No image data available, using fallback image');
    const fallbackImage = '/path/to/fallback/image.png'; // Ensure this path is correct and accessible
    setAnalyzedImage(fallbackImage);
  }

  const handleRawImageReady = (data) => {
    console.log('handleRawImageReady: Raw image ready, setting analyzed image4');
    setAnalyzedImage(data);
  };

  eventBus.on('imageType', handleImageType);
  eventBus.on('rawImageReady', handleRawImageReady);

  return () => {
    console.log('useEffect: Cleaning up event listeners5');
    eventBus.off('imageType', handleImageType);
    eventBus.off('rawImageReady', handleRawImageReady);
  };
}, [imageData, additionalData]);

useEffect(() => {
  if (analyzedImage) {
    console.log('useEffect: analyzedImage changed, calling load');
    load();
  }
}, [analyzedImage]);

const load = async () => {
  console.log('load: Starting load process6');
  console.log('load: analyzedImage', analyzedImage); // Log the value of analyzedImage
  eventBus.emit('loadingDialog');
  await new Promise((resolve) => setTimeout(resolve, 2000));
  console.log('load: Load process complete, starting analysis7');
  analyze();
  turnImages();
};
  
  const rerender = () => {
    console.log('rerender: Forcing rerender8');
    eventBus.emit('forceRerender');
  };
  
  const imageMenu = (index) => {
    console.log(`imageMenu: Setting active image to index ${index}9`);
    setActive(index);
  };
  
  const next = () => {
    console.log('next: Moving to next image10');
    setWindow((window + 1) === length ? 0 : window + 1);
  };
  
  const previous = () => {
    console.log('previous: Moving to previous image11');
    setWindow((window - 1) < 0 ? length - 1 : window - 1);
  };
  

const analyze = async () => {
  console.log('analyze: Starting analysis12');
  if (!analyzedImage) {
    console.error('analyze: No analyzed image available13');
    return;
  }

  // Show 'analysis' components in React
  setAnalysisStarted(true);

  // Ensure the analyzedImage is a valid image element or URL
  const img = new Image();
  img.src = analyzedImage;
  img.onload = () => {
    console.log('analyze: Image loaded successfully');
    
    // Check if the canvas already exists
    let canvas = document.getElementById('analyzedCanvas');
    if (!canvas) {
      // Create a new canvas if it doesn't exist
      canvas = document.createElement('canvas');
      canvas.id = 'analyzedCanvas';
      document.body.appendChild(canvas);
    }

    // Set canvas dimensions and draw the image
    canvas.width = img.width;
    canvas.height = img.height;
    const ctx = canvas.getContext('2d');
    ctx.drawImage(img, 0, 0);

    // Load image into OpenCV using getElementById
    const canvasElement = document.getElementById('analyzedCanvas');
    if (!canvasElement) {
      console.error('analyze: Canvas element not found');
      return;
    }
    const src = cv.imread(canvasElement); // Use the canvas element ID
    const overlay = src.clone();

    // Show source image via OpenCV
    cv.imshow('src', src);

    // Image Info for debugging
    setImageSize(`${src.size().width} x ${src.size().height}`);
    setImageDepth(src.depth());
    setImageChannels(src.channels());
    setImageType(src.type());

    // Create matrices for various analysis activities
    const gray = new cv.Mat();
    const threshold = new cv.Mat();
    const dilate = new cv.Mat();
    let boundingBoxes = new cv.Mat();
    const objects = cv.Mat.zeros(src.rows, src.cols, cv.CV_8UC3);
    const outlines = new cv.Mat(src.rows, src.cols, cv.CV_8UC3, new cv.Scalar(255, 255, 255, 0));

    // TRANSFORMATIONS
    // Source to Grayscale
    cv.cvtColor(src, gray, cv.COLOR_RGBA2GRAY);

    // Grayscale to Threshold (binary, not adaptive)
    cv.threshold(gray, threshold, threshValue, 255, cv.THRESH_BINARY);

    // Threshold to Dilate [and erode](create new matrix that can be written upon and anchor point (center))
    const M = cv.Mat.ones(3, 3, cv.CV_8U);
    const anchor = new cv.Point(-1, -1);
    cv.dilate(threshold, dilate, M, anchor, 0, cv.BORDER_CONSTANT, cv.morphologyDefaultBorderValue());

    // DRAW CONTOURS
    // Create matrices to hold contour counts
    const contours = new cv.MatVector();
    const hierarchy = new cv.Mat();
    const contoursObject = [];
    let contoursValues = [];

    // Find contours
    cv.findContours(dilate, contours, hierarchy, cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE);

    // CALCULATE SINGLE EGGS AND CLUSTERS
    // Initialize and/or reset single and cluster arrays, counts, and area placeholders for computation
    const detectedObjectsArray = [];
    setSinglesArray([]);
    setClustersArray([]);
    setSinglesCount(0);
    setClustersCount(0);
    setSinglesTotalArea(0);
    setClustersTotalArea(0);

    // Define colors for contour object detection (boxes) and contour overlay (green=small, blue=single-egg, red=cluster)
    const contoursColor = new cv.Scalar(255, 255, 255);
    const green = new cv.Scalar(0, 225, 0, 255);
    const blue = new cv.Scalar(0, 0, 225, 255);
    const red = new cv.Scalar(255, 0, 0, 255);
    const grayColor = new cv.Scalar(100, 100, 100, 255);
    const minEggArea = Math.PI * (minEggRadius * minEggRadius);
    const maxEggArea = Math.PI * (maxEggRadius * maxEggRadius);
    const maxClusterArea = Math.PI * (maxEggCluster * maxEggCluster);

    // Main loop
    for (let i = 1; i < contours.size(); ++i) {
      contoursObject.push(cv.contourArea(contours.get(i)));
      contoursValues = Object.values(contoursObject);
      const contourMax = Math.max(...contoursValues);
      if (contourMax === cv.contourArea(contours.get(i))) {
      } else {
        // Draw contours and bounding boxes for all objects detected from 'contours' matrix
        const cnt = contours.get(i);
        const rect = cv.boundingRect(cnt);
        cv.drawContours(objects, contours, i, contoursColor, 1, 8, hierarchy, 100);
        const point1 = new cv.Point((rect.x - 5), (rect.y - 5));
        const point2 = new cv.Point(rect.x + rect.width + 5, rect.y + rect.height + 5);
        if (hierarchy.intPtr(0, i)[0] === -1 || hierarchy.intPtr(0, i)[1] === -1 || hierarchy.intPtr(0, i)[2] === -1 || hierarchy.intPtr(0, i)[3] === -1) {
          cv.rectangle(objects, point1, point2, green, 1, cv.LINE_AA, 0);
        } else {
          cv.rectangle(objects, point1, point2, green, 3, cv.LINE_AA, 0);
        }

        // Create matrix for points of objects for all objects, even if not calculated immediately (until individual boxes invoked)
        boundingBoxes = src.roi(rect);
        detectedObjectsArray.push(boundingBoxes);

        // Loop through all contours and sort/color by size, drawing on both outlines and overlay images (as well as counting towards array counts)
        if (cv.contourArea(contours.get(i)) <= minEggArea) {
          cv.drawContours(outlines, contours, i, grayColor, -1, cv.LINE_8, hierarchy, 0);
          cv.drawContours(overlay, contours, i, grayColor, 1, cv.LINE_8, hierarchy, 0);
        } else if (cv.contourArea(contours.get(i)) > minEggArea && cv.contourArea(contours.get(i)) <= maxEggArea) {
          cv.drawContours(outlines, contours, i, blue, -1, cv.LINE_8, hierarchy, 0);
          cv.drawContours(overlay, contours, i, blue, 1, cv.LINE_8, hierarchy, 0);
          setSinglesArray((prev) => [...prev, cv.contourArea(contours.get(i))]);
          setSinglesCount((prev) => prev + 1);
        } else if (cv.contourArea(contours.get(i)) > maxEggArea && cv.contourArea(contours.get(i)) <= maxClusterArea) {
          cv.drawContours(outlines, contours, i, red, -1, cv.LINE_8, hierarchy, 0);
          cv.drawContours(overlay, contours, i, red, 1, cv.LINE_8, hierarchy, 0);
          setClustersArray((prev) => [...prev, cv.contourArea(contours.get(i))]);
          setClustersCount((prev) => prev + 1);
        } else if (cv.contourArea(contours.get(i)) > maxClusterArea) {
          cv.drawContours(outlines, contours, i, grayColor, -1, cv.LINE_8, hierarchy, 0);
          cv.drawContours(overlay, contours, i, grayColor, 1, cv.LINE_8, hierarchy, 0);
        }
      }
    }

    // CALCULATIONS
    // Use array counts to calculate single size averages, single size area, cluster average, and cluster area
    let singlesTotalArea = 0;
    singlesArray.forEach((area) => {
      singlesTotalArea += area;
    });
    setSinglesTotalArea(singlesTotalArea);
    const singlesAvg = (singlesTotalArea / singlesArray.length).toFixed(2);
    setSinglesAvg(isNaN(singlesAvg) ? 0 : singlesAvg);

    // Calculate cluster area if not zero, append to total cluster area of image
    let clustersTotalArea = 0;
    if (clustersCount !== 0) {
      clustersArray.forEach((area) => {
        clustersTotalArea += area;
      });
    }
    setClustersTotalArea(clustersTotalArea);

    // Calculate and convert to output formats
    const singlesCalculated = (clustersTotalArea / singlesAvg).toFixed(0);
    setSinglesCalculated(isNaN(singlesCalculated) ? 0 : singlesCalculated);
    const avgClusterArea = (clustersTotalArea / clustersCount).toFixed(2);
    setAvgClusterArea(isNaN(avgClusterArea) ? 0 : avgClusterArea);
    const avgEggsPerCluster = (avgClusterArea / singlesAvg).toFixed(1);
    setAvgEggsPerCluster(isNaN(avgEggsPerCluster) ? 0 : avgEggsPerCluster);
    setTotalEggs(+singlesCount + +singlesCalculated);

    // Show images
    cv.imshow('src', src);
    cv.imshow('src2', src);
    cv.imshow('src3', src);
    cv.imshow('src5', src);
    cv.imshow('src6', src);
    cv.imshow('src7', src);
    cv.imshow('threshold', threshold);
    cv.imshow('objects', objects);
    cv.imshow('outlines', outlines);
    cv.imshow('overlay', overlay);

    // Show legend image
    const legend = cv.imread('legendImage');
    cv.circle(legend, new cv.Point(50, 50), minEggRadius, blue, 1); // Blue inner circle
    cv.circle(legend, new cv.Point(50, 50), maxEggRadius, red, 1); // Red outer circle
    cv.circle(legend, new cv.Point(50, 50), maxEggCluster, grayColor, 1); // Gray outer circle
    cv.imshow('legendCanvas', legend);
    legend.delete();

    // Delete matrices to save on memory
    src.delete();
    gray.delete();
    threshold.delete();
    dilate.delete();
    objects.delete();
    outlines.delete();
    overlay.delete();
    M.delete();
    contours.delete();
    hierarchy.delete();

    console.log('analyze: Analysis complete14');
  };
  img.onerror = () => {
    console.error('analyze: Failed to load analyzed image');
    console.error('analyze: Invalid image source', analyzedImage);
  };
};


  const turnImages = async () => {
    console.log('turnImages: Starting image rotation15');
    // Use time delays to display calculation images and rotate when done calculating
    for (let i = 0; i < length; ++i) {
      await new Promise((resolve) => setTimeout(resolve, 500));
      setWindow(i);
    }
  
    // After timeout, show analysis results
    await new Promise((resolve) => setTimeout(resolve, 500));
    setAnalysisComplete(true);
  
    // After timeout, show bottom menu
    await new Promise((resolve) => setTimeout(resolve, 500));
    setShowBottom(true);

    console.log('turnImages: Image rotation complete16');
  };

  return (
    <Container fluid>
      <Grid container spacing={3}>
        <Grid item xs={12} md={8} lg={8} xl={9} style={{ display: analysisStarted ? 'block' : 'none' }}>
          <Card className="elevation-5">
            {analyzedImages.map((item, index) => (
              <div key={item.output} style={{ display: window === index ? 'block' : 'none' }}>
                <canvas id={item.output} className="imageCanvasOuter" style={{ display: showAnalysis ? 'block' : 'none' }}>
                  <img className="imageCanvasInner" id="analyzedImage" src={analyzedImage} style={{ height: '100px' }} />
                </canvas>
                <canvas id={item.source} className="imageCanvasOuter" style={{ display: !showAnalysis ? 'block' : 'none' }}>
                  <img className="imageCanvasInner" id="analyzedImage" src={analyzedImage} />
                </canvas>
              </div>
            ))}
          </Card>
          <Card className="my-3">
            <CardContent>
              <Grid container alignItems="center">
                <Grid item>
                  <h1>{analyzedImagesPretty[window]}</h1>
                  <h2>({window + 1} of {analyzedImages.length})</h2>
                </Grid>
                <Grid item>
                  <IconButton color="primary" onClick={previous}>
                    <Icon>chevron_left</Icon>
                  </IconButton>
                  <IconButton color="primary" onClick={next}>
                    <Icon>chevron_right</Icon>
                  </IconButton>
                </Grid>
              </Grid>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} md={4} lg={3} xl={3} style={{ paddingLeft: analysisComplete ? '0' : '3' }}>
          {drawer && (
            <Card className="mb-2">
              <CardContent>
                <h4>Filters</h4>
                <Grid container>
                  <Tooltip title="Image Threshold Adjustment Details">
                    <Grid item>
                      <span>Image Threshold Adjustment</span>
                    </Grid>
                  </Tooltip>
                  <Grid item xs={9}>
                    <Slider value={threshValue} max={255} onChange={(_, value) => setThreshValue(value)} onChangeCommitted={analyze} />
                  </Grid>
                  <Grid item xs={3}>
                    <TextField value={threshValue} onChange={(e) => setThreshValue(e.target.value)} />
                  </Grid>
                </Grid>
                <Grid container>
                  <Tooltip title="Minimum Egg Size Details">
                    <Grid item>
                      <span>Minimum Egg Size</span>
                    </Grid>
                  </Tooltip>
                  <Grid item xs={9}>
                    <Slider value={minEggRadius} min={0} max={100} onChange={(_, value) => setMinEggRadius(value)} onChangeCommitted={analyze} />
                  </Grid>
                  <Grid item xs={3}>
                    <TextField value={minEggRadius} onChange={(e) => setMinEggRadius(e.target.value)} />
                  </Grid>
                </Grid>
                <Grid container>
                  <Tooltip title="Maximum Egg Size Details">
                    <Grid item>
                      <span>Maximum Egg Size</span>
                    </Grid>
                  </Tooltip>
                  <Grid item xs={9}>
                    <Slider value={maxEggRadius} min={0} max={100} onChange={(_, value) => setMaxEggRadius(value)} onChangeCommitted={analyze} />
                  </Grid>
                  <Grid item xs={3}>
                    <TextField value={maxEggRadius} onChange={(e) => setMaxEggRadius(e.target.value)} />
                  </Grid>
                </Grid>
                <Grid container>
                  <Tooltip title="Maximum Cluster Size Details">
                    <Grid item>
                      <span>Maximum Cluster Size</span>
                    </Grid>
                  </Tooltip>
                  <Grid item xs={9}>
                    <Slider value={maxEggCluster} min={0} max={100} onChange={(_, value) => setMaxEggCluster(value)} onChangeCommitted={analyze} />
                  </Grid>
                  <Grid item xs={3}>
                    <TextField value={maxEggCluster} onChange={(e) => setMaxEggCluster(e.target.value)} />
                  </Grid>
                </Grid>
                <Grid container alignItems="center">
                  <Tooltip title="Egg Size Scale Details">
                    <Grid item>
                      <p>Egg Size Scale</p>
                      <p><Icon style={{ color: 'rgba(0, 0, 225, 255)' }}>fiber_manual_record</Icon> Minimum Egg Size</p>
                      <p><Icon style={{ color: 'rgba(225, 0, 0, 255)' }}>fiber_manual_record</Icon> Maximum Egg Size</p>
                      <p><Icon style={{ color: 'rgba(100, 100, 100, 255)' }}>fiber_manual_record</Icon> Too Large / Too Small</p>
                    </Grid>
                  </Tooltip>
                  <Grid item>
                    <canvas id="legendCanvas" style={{ margin: 'auto', display: 'block' }}>
                      <img id="legendImage" src="/mecvision/img/legend.png" />
                    </canvas>
                  </Grid>
                </Grid>
              </CardContent>
            </Card>
          )}
          <Card>
            <CardContent>
              <h4>Analysis</h4>
              <Button color="primary" onClick={() => setDetailsDialog(true)}>Details</Button>
              <List>
                <ListItem>
                  <ListItemText primary={<span><Icon style={{ color: 'rgba(0, 0, 225, 255)' }}>fiber_manual_record</Icon> Single Eggs</span>} secondary={singlesCount} />
                </ListItem>
                <ListItem>
                  <ListItemText primary={<span><Icon style={{ color: 'rgba(225, 0, 0, 255)' }}>fiber_manual_record</Icon> Calculated from Clusters</span>} secondary={singlesCalculated} />
                </ListItem>
                <ListItem>
                  <ListItemText primary="Total Egg Estimation" secondary={totalEggs} />
                </ListItem>
              </List>
            </CardContent>
          </Card>
        </Grid>
      </Grid>
      <Dialog open={detailsDialog} onClose={() => setDetailsDialog(false)} maxWidth="sm" fullWidth>
        <Card>
          <CardContent>
            <h2>Details</h2>
            <List>
              <ListItem>
                <ListItemText primary="Total Single Egg Area" secondary={singlesTotalArea} />
              </ListItem>
              <ListItem>
                <ListItemText primary="Single Egg Average Size" secondary={singlesAvg} />
              </ListItem>
              <ListItem>
                <ListItemText primary="Egg Clusters" secondary={clustersCount} />
              </ListItem>
              <ListItem>
                <ListItemText primary="Total Egg Clusters Area" secondary={clustersTotalArea} />
              </ListItem>
              <ListItem>
                <ListItemText primary="Average Cluster Area" secondary={avgClusterArea} />
              </ListItem>
              <ListItem>
                <ListItemText primary="Average Eggs per Cluster" secondary={avgEggsPerCluster} />
              </ListItem>
              <ListItem>
                <ListItemText primary="Image Size" secondary={imageSize} />
              </ListItem>
            </List>
          </CardContent>
          <CardActions>
            <Button color="primary" onClick={() => setDetailsDialog(false)}>Close</Button>
          </CardActions>
        </Card>
      </Dialog>
      <div style={{ position: 'fixed', bottom: 0, width: '80%', display: showBottom ? 'flex' : 'none', justifyContent: 'space-around', height: '70px', backgroundColor: '#fff' }}>
        <Button color="primary" onClick={rerender}>
          <span>Reset</span>
          <RestartAltIcon/>
        </Button>
        <Button color="primary" onClick={() => setDrawer(!drawer)}>
          <span>Show Filters</span>
          <FilterAltIcon/>
        </Button>
      </div>
    </Container>
  );
};

export default Analysis;
